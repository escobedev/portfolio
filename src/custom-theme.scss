
@use '@angular/material' as mat;
@include mat.core();

$dark-theme: mat.define-theme((
    color: (
        theme-type: dark,
        primary: mat.$cyan-palette,
        tertiary: mat.$cyan-palette,
    ),
    density: (
        scale: 0,
    )
));

$light-theme: mat.define-theme((
    color: (
        theme-type: light,
        primary: mat.$azure-palette,
        tertiary: mat.$azure-palette,
    ),
    density: (
        scale: 0,
    )
));

:root {
    @include mat.all-component-themes($dark-theme);
    background-color: var(--mat-app-background-color);
    color: var(--mat-app-text-color);
    transition: all 0.3 ease-in-out;

    @media (prefers-color-scheme: light) {
        @include mat.all-component-themes($light-theme);
    }
}

:root[data-theme="dark"] {
    @include mat.all-component-themes($dark-theme);
}
:root[data-theme="light"] {
    @include mat.all-component-themes($light-theme);
}

@keyframes blink {
    0% { border-color: unset; }
    50% { border-color: transparent; }
}

.flex-container {
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}
.full-width {
    width: 100%;
}
.mat-mdc-form-field-icon-prefix, .mat-mdc-form-field-icon-suffix {
    display: flex;
}

.card-list-fetching-animation {
    animation: fetch 0.5s ease-in-out;
}
@keyframes fetch {
    from { opacity: 0; transform: translateY(50px); }
    to { opacity: 1; transform: translateY(0); }
}

.gradient-background {
    background: linear-gradient(
        transparent 0%,
        color-mix(
            in srgb,
            var(--theme-color-1) 50%,
            transparent 50%
        ) 33%,
        color-mix(
            in srgb,
            var(--theme-color-2) 50%,
            transparent 50%
        ) 66%,
        transparent 100%
    );
}

.container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.grid-list {
    width: 100%;
    padding: 20px;
    box-sizing: border-box;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 400px));
    justify-content: center;
    gap: 20px;
}

.relative {
    position: relative;
    .absolute {
        position: absolute;
        top: 0;
        left: 0;
    }
}

.border-box {
    box-sizing: border-box;
}